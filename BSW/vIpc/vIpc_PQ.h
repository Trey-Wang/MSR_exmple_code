/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *  \verbatim
 *  Copyright (c) 2017 by Vector Informatik GmbH.                                                  All rights reserved.
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  \endverbatim
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -----------------------------------------------------------------------------------------------------------------*/
/**       \file
 *        \brief  vIpc_PQ header file
 *
 *        \details Todo: Fill in details
 *
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  REVISION HISTORY
 *  -------------------------------------------------------------------------------------------------------------------
 *  Refer to the module's header file.
 *
 *  FILE VERSION
 *  -------------------------------------------------------------------------------------------------------------------
 *  Refer to the VERSION CHECK below.
 *********************************************************************************************************************/
#ifndef VIPC_PQ_H
# define VIPC_PQ_H


/**********************************************************************************************************************
 *  INCLUDES
 *********************************************************************************************************************/
#include "vIpc_Priv.h"

/**********************************************************************************************************************
 *  GLOBAL CONSTANT MACROS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTION MACROS
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL DATA TYPES AND STRUCTURES
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL DATA PROTOTYPES
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  LOCAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *  GLOBAL FUNCTION PROTOTYPES
 *********************************************************************************************************************/

#define VIPC_START_SEC_CODE
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

/**********************************************************************************************************************
 * vIpc_PQ_Init()
 *********************************************************************************************************************/
/*! \brief       Initializes the queue to an empty state.
 *  \details     Initializes the queue to an empty state.
 *  \context     TASK
 *  \reentrant   FALSE
 *  \synchronous TRUE
 *  \pre         -
 *  \ingroup     PQ
 *********************************************************************************************************************/
FUNC(void, VIPC_CODE) vIpc_PQ_Init(void);
 
/**********************************************************************************************************************
 * vIpc_PQ_Insert()
 *********************************************************************************************************************/
/*! \brief       Insert a connection ID.
 *  \details     Inserts a single connection ID in the queue. Repeated inserts are ignored.
 *  \context     TASK
 *  \reentrant   FALSE
 *  \synchronous TRUE
 *  \pre         -
 *  \ingroup     PQ
 *********************************************************************************************************************/
FUNC(void, VIPC_CODE) vIpc_PQ_Insert(PduIdType ConnectionId);

/**********************************************************************************************************************
 * vIpc_PQ_Peek()
 *********************************************************************************************************************/
/*! \brief       Returns queued connection ID with highest priority.
 *  \details     Returns queued connection ID with highest priority. The connection ID is *not* removed from queue.
 *  \return      uint32     The queued connection ID with highest priority.
 *  \context     TASK
 *  \reentrant   FALSE
 *  \synchronous TRUE
 *  \pre         Must only be called if at least one connection is enqueued.
 *  \ingroup     PQ
 *********************************************************************************************************************/
FUNC(Std_ReturnType, VIPC_CODE) vIpc_PQ_Peek(PduIdType TxChanId,
                                                    CONSTP2VAR(PduIdType, AUTOMATIC, VIPC_APPL_VAR) TxConIdPtr);

/**********************************************************************************************************************
 * vIpc_PQ_Remove()
 *********************************************************************************************************************/
/*! \brief       Removes the specified connection from queue.
 *  \details     Removes the specified connection from queue. The connection has to be the connection which was
 *               transmitted completely.
 *  \context     TASK
 *  \reentrant   FALSE
 *  \synchronous TRUE
 *  \pre         Must only be called if at least one connection is enqueued.
 *  \ingroup     PQ
 *********************************************************************************************************************/
FUNC(void, VIPC_CODE) vIpc_PQ_Remove(PduIdType TxConId);

#define VIPC_STOP_SEC_CODE
#include "MemMap.h" /* PRQA S 5087 */ /* MD_MSR_19.1 */

/**********************************************************************************************************************
 *  LOCAL FUNCTIONS
 *********************************************************************************************************************/

#endif /* VIPC_PQ_H */

/**********************************************************************************************************************
 *  END OF FILE: vIpc_PQ.h
 *********************************************************************************************************************/
