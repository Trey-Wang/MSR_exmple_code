/**********************************************************************************************************************
 *  COPYRIGHT
 *  -------------------------------------------------------------------------------------------------------------------
 *
 *                This software is copyright protected and proprietary to Vector Informatik GmbH.
 *                Vector Informatik GmbH grants to you only those rights as set out in the license conditions.
 *                All other rights remain with Vector Informatik GmbH.
 *  -------------------------------------------------------------------------------------------------------------------
 *  FILE DESCRIPTION
 *  -------------------------------------------------------------------------------------------------------------------
 *          File:  Rte.oil
 *        Config:  MyECU.dpa
 *   ECU-Project:  MyECU
 *
 *     Generator:  MICROSAR RTE Generator Version 4.16.0
 *                 RTE Core Version 1.16.0
 *       License:  Unlimited license CBD0000000 for N/A
 *
 *   Description:  OIL-File containing project specific OS definitions for the MICROSAR RTE
 *********************************************************************************************************************/

/**********************************************************************************************************************
 *                                              P L E A S E   N O T E
 *
 * The attributes in this file must not be changed. Missing mandatory attributes must be set in the including file.
 * They are presented as a comment in the corresponding object definition containing a list of all legal values.
 *********************************************************************************************************************/

   TASK IO_Task {
      ACTIVATION = 1:"@RO@";
      PRIORITY = 2:"@RO@";
      SCHEDULE = NON:"@RO@";
// TIMING_PROTECTION = FALSE|TRUE; (AUTOSAR OS only)
      AUTOSTART = FALSE:"@RO@";
      EVENT = Rte_Ev_Cyclic_IO_Task_0_200ms:"@RO@";
      EVENT = Rte_Ev_Run_CpSaDisplay_RCtApDisplayBusStateHandling:"@RO@";
      EVENT = Rte_Ev_Run_CpSaDisplay_RCtApDisplayLightOnOffHandling:"@RO@";
      EVENT = Rte_Ev_Run_CpSaDisplay_RCtApDisplayOdometerValue:"@RO@";
      EVENT = Rte_Ev_Run_CpSaDisplay_RCtApDisplayOdometerWriteRequestPending:"@RO@";
      EVENT = Rte_Ev_Run_CpSaInteriorLightFront_RCtSaInteriorLightSwitchLight:"@RO@";
   }:"@RO@@NR@";

   ALARM Rte_Al_TE_IO_Task_0_200ms {
      COUNTER = SystemTimer;
      ACTION = SETEVENT
      {
         TASK = IO_Task;
         EVENT = Rte_Ev_Cyclic_IO_Task_0_200ms;
      }:"@ROC@";
      AUTOSTART = FALSE:"@RO@";
   }:"@RO@@NR@";

   TASK My_Task {
      ACTIVATION = 1:"@RO@";
      PRIORITY = 3:"@RO@";
      SCHEDULE = NON:"@RO@";
// TIMING_PROTECTION = FALSE|TRUE; (AUTOSAR OS only)
      AUTOSTART = FALSE:"@RO@";
      EVENT = Rte_Ev_Run1_CpApMySwc_RCtApMySwcPostRunCode:"@RO@";
      EVENT = Rte_Ev_Run_CpApMySwc_RCtApMySwcCode:"@RO@";
      EVENT = Rte_Ev_Run_CpApMySwc_RCtApMySwcComM_ModeChange_FULL_COMM_Entry:"@RO@";
      EVENT = Rte_Ev_Run_CpApMySwc_RCtApMySwcComM_ModeChange_FULL_COMM_Exit:"@RO@";
      EVENT = Rte_Ev_Run_CpApMySwc_RCtApMySwcPostRunCode:"@RO@";
   }:"@RO@@NR@";

   ALARM Rte_Al_TE_CpApMySwc_RCtApMySwcCode {
      COUNTER = SystemTimer;
      ACTION = SETEVENT
      {
         TASK = My_Task;
         EVENT = Rte_Ev_Run_CpApMySwc_RCtApMySwcCode;
      }:"@ROC@";
      AUTOSTART = FALSE:"@RO@";
   }:"@RO@@NR@";

   TASK SchM_Task {
      ACTIVATION = 1:"@RO@";
      PRIORITY = 6:"@RO@";
      SCHEDULE = FULL:"@RO@";
// TIMING_PROTECTION = FALSE|TRUE; (AUTOSAR OS only)
      AUTOSTART = FALSE:"@RO@";
      EVENT = Rte_Ev_Cyclic2_SchM_Task_0_10ms:"@RO@";
      EVENT = Rte_Ev_Cyclic2_SchM_Task_0_20ms:"@RO@";
      EVENT = Rte_Ev_Cyclic2_SchM_Task_0_5ms:"@RO@";
   }:"@RO@@NR@";

   ALARM Rte_Al_TE2_SchM_Task_0_10ms {
      COUNTER = SystemTimer;
      ACTION = SETEVENT
      {
         TASK = SchM_Task;
         EVENT = Rte_Ev_Cyclic2_SchM_Task_0_10ms;
      }:"@ROC@";
      AUTOSTART = FALSE:"@RO@";
   }:"@RO@@NR@";

   ALARM Rte_Al_TE2_SchM_Task_0_20ms {
      COUNTER = SystemTimer;
      ACTION = SETEVENT
      {
         TASK = SchM_Task;
         EVENT = Rte_Ev_Cyclic2_SchM_Task_0_20ms;
      }:"@ROC@";
      AUTOSTART = FALSE:"@RO@";
   }:"@RO@@NR@";

   ALARM Rte_Al_TE2_SchM_Task_0_5ms {
      COUNTER = SystemTimer;
      ACTION = SETEVENT
      {
         TASK = SchM_Task;
         EVENT = Rte_Ev_Cyclic2_SchM_Task_0_5ms;
      }:"@ROC@";
      AUTOSTART = FALSE:"@RO@";
   }:"@RO@@NR@";

   EVENT Rte_Ev_Cyclic2_SchM_Task_0_10ms {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Cyclic2_SchM_Task_0_20ms {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Cyclic2_SchM_Task_0_5ms {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Cyclic_IO_Task_0_200ms {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run1_CpApMySwc_RCtApMySwcPostRunCode {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpApMySwc_RCtApMySwcCode {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpApMySwc_RCtApMySwcComM_ModeChange_FULL_COMM_Entry {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpApMySwc_RCtApMySwcComM_ModeChange_FULL_COMM_Exit {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpApMySwc_RCtApMySwcPostRunCode {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpSaDisplay_RCtApDisplayBusStateHandling {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpSaDisplay_RCtApDisplayLightOnOffHandling {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpSaDisplay_RCtApDisplayOdometerValue {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpSaDisplay_RCtApDisplayOdometerWriteRequestPending {
      MASK = AUTO;
   }:"@ROC@@NR@";

   EVENT Rte_Ev_Run_CpSaInteriorLightFront_RCtSaInteriorLightSwitchLight {
      MASK = AUTO;
   }:"@ROC@@NR@";
